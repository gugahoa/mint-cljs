#+PROPERTY: id some-unique-id
#+PROPERTY: date 2020-12-30
#+PROPERTY: title Building a static blog with ClojureScript and Reagent
#+PROPERTY: summary We're going to create a fully loaded blog, with pagination, search and fast load time. All done using ClojureScript and Reagent at compile-time

* Building a static blog with ClojureScript and Reagent

** The Index

The blog index contains articles' summaries, title and creation date. Our posts contain properties for those information, with a syntax such as the following:

#+NAME: properties-example
#+BEGIN_SRC org
#+PROPERTY: id some-unique-id
#+PROPERTY: date 2020-12-30
#+PROPERTY: title My article title
#+PROPERTY: summary A short summary of my article
#+END_SRC

To read those properties at compileâ€“time we'll use a macro, defined inside a Clojure source file as it needs access to Java APIs.

#+NAME: reader-core-1
#+BEGIN_SRC clojure
(ns mint.reader.core (:require
                      [clojure.java.io :as io]
                      [clojure.string :as str]))

(def directory
  "Our posts live inside the `/posts` folder"
  (io/file "./posts"))

(def files
  "A sequence of files inside our posts directory"
  (filter #(.isFile %) (file-seq directory)))

(defn- raw-properties
  "Everything before the first empty line is considered a raw property"
  [reader]
  (take-while not-empty reader))

(defn- clean-raw-property
  "A raw property is a string with the following format `#+PROPERTY: name value`.
  If given the above value as input, this function will return {:name \"value\"}"
  [raw-property]
  (-> raw-property
      (str/split #":")
      second
      str/trim
      (str/split #" " 2)
      (update-in [0] keyword)))

(defn- build-properties
  "This functions take a reader and return a map mapping a property name to its value"
  [rdr]
  (->> (line-seq rdr)
       raw-properties
       (map clean-raw-property)
       (into {})))

(defn- read-properties [file]
  (with-open [rdr (io/reader file)]
    (build-properties rdr)))

(defmacro posts-index
  "A macro that returns a list of posts"
  []
  (mapv read-properties files))
#+END_SRC

The `posts-index` macro now can be used directly inside cljs files, and will evaluate at compile time to the posts index structure.

You can read more about this strategy in [this blogpost](https://blog.fikesfarm.com/posts/2018-08-12-two-file-clojurescript-namespace-pattern.html).

Updating the `/posts` folder, or any file therein, does not trigger hot reload. This is a downside that I plan to address, but it hasn't bothered me enough.

*** TODO article id can be inferred by file name, as the file name is guaranteed to be unique

** The Article

Rough sketch for the article page:
1. Somehow read .org into variables
   * bonus: in a way that the data won't be downloaded unless the user visits the article page.
2. From the route, find the correct variable to read from
3. Render variable content into an article

*** TODO Research about using Rust from Clojure. Objective: using orgize
Examples:
https://github.com/theiceshelf/firn
https://github.com/naomijub/JVM-rust-ffi/tree/master/clj-rs
https://github.com/naomijub/brcode
